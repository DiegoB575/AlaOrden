// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TFinal.Repository.Context;

namespace TFinal.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190628202308_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TFinal.Domain.CarritoItem", b =>
                {
                    b.Property<int>("IdUsuario");

                    b.Property<int>("IdProducto");

                    b.Property<int>("Cantidad");

                    b.HasKey("IdUsuario", "IdProducto");

                    b.HasIndex("IdProducto");

                    b.ToTable("CarritoItem");
                });

            modelBuilder.Entity("TFinal.Domain.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdCategoriaPadre");

                    b.Property<string>("Nombre");

                    b.HasKey("IdCategoria");

                    b.HasIndex("IdCategoriaPadre");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("TFinal.Domain.Cupon", b =>
                {
                    b.Property<int>("IdCupon")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("FechaEmision");

                    b.Property<DateTime>("FechaExpiracion");

                    b.Property<int?>("IdPedido");

                    b.Property<bool>("Vigente");

                    b.HasKey("IdCupon");

                    b.HasIndex("IdPedido");

                    b.ToTable("Cupon");
                });

            modelBuilder.Entity("TFinal.Domain.DetallePedido", b =>
                {
                    b.Property<int>("IdPedido");

                    b.Property<int>("IdProducto");

                    b.Property<int>("Cantidad");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("IdPedido", "IdProducto");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallePedido");
                });

            modelBuilder.Entity("TFinal.Domain.Direccion", b =>
                {
                    b.Property<int>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<int>("IdUsuario");

                    b.Property<double>("Latitud");

                    b.Property<double>("Longitud");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("TFinal.Domain.Franquicia", b =>
                {
                    b.Property<int>("IdFranquicia")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiUrl");

                    b.Property<string>("Logo");

                    b.Property<string>("Nombre");

                    b.Property<string>("WebUrl");

                    b.HasKey("IdFranquicia");

                    b.ToTable("Franquicia");
                });

            modelBuilder.Entity("TFinal.Domain.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("IdMarca");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("TFinal.Domain.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("Direccion");

                    b.Property<string>("Estado");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("IdSede");

                    b.Property<int>("IdTransaccion");

                    b.Property<int>("IdUsuario");

                    b.Property<decimal>("PrecioEnvio")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdSede");

                    b.HasIndex("IdTransaccion")
                        .IsUnique();

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("TFinal.Domain.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("Descripcion");

                    b.Property<int>("IdCategoria");

                    b.Property<int>("IdMarca");

                    b.Property<string>("Imagen");

                    b.Property<double>("Magnitud");

                    b.Property<string>("Nombre");

                    b.Property<string>("Presentacion");

                    b.Property<string>("Unidad");

                    b.HasKey("IdProducto");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdMarca");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("TFinal.Domain.ProductoFranquicia", b =>
                {
                    b.Property<int>("IdProducto");

                    b.Property<int>("IdFranquicia");

                    b.Property<string>("CodReferencia");

                    b.HasKey("IdProducto", "IdFranquicia");

                    b.HasIndex("IdFranquicia");

                    b.ToTable("ProductoFranquicia");
                });

            modelBuilder.Entity("TFinal.Domain.Sede", b =>
                {
                    b.Property<int>("IdSede")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion");

                    b.Property<int>("IdFranquicia");

                    b.Property<double>("Latitud");

                    b.Property<double>("Longitud");

                    b.HasKey("IdSede");

                    b.HasIndex("IdFranquicia");

                    b.ToTable("Sede");
                });

            modelBuilder.Entity("TFinal.Domain.Transaccion", b =>
                {
                    b.Property<int>("IdTransaccion")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber");

                    b.HasKey("IdTransaccion");

                    b.ToTable("Transaccion");
                });

            modelBuilder.Entity("TFinal.Domain.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apodo");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailValidado");

                    b.Property<string>("HashContrasena");

                    b.Property<string>("Sal");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("TFinal.Domain.CarritoItem", b =>
                {
                    b.HasOne("TFinal.Domain.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFinal.Domain.Usuario", "Usuario")
                        .WithMany("Carrito")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFinal.Domain.Categoria", b =>
                {
                    b.HasOne("TFinal.Domain.Categoria", "CategoriaPadre")
                        .WithMany("SubCategorias")
                        .HasForeignKey("IdCategoriaPadre")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TFinal.Domain.Cupon", b =>
                {
                    b.HasOne("TFinal.Domain.Pedido", "Pedido")
                        .WithMany("Cupones")
                        .HasForeignKey("IdPedido");
                });

            modelBuilder.Entity("TFinal.Domain.DetallePedido", b =>
                {
                    b.HasOne("TFinal.Domain.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFinal.Domain.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFinal.Domain.Direccion", b =>
                {
                    b.HasOne("TFinal.Domain.Usuario", "Usuario")
                        .WithMany("Direcciones")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFinal.Domain.Pedido", b =>
                {
                    b.HasOne("TFinal.Domain.Sede", "Sede")
                        .WithMany()
                        .HasForeignKey("IdSede")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFinal.Domain.Transaccion", "Transaccion")
                        .WithOne()
                        .HasForeignKey("TFinal.Domain.Pedido", "IdTransaccion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFinal.Domain.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFinal.Domain.Producto", b =>
                {
                    b.HasOne("TFinal.Domain.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFinal.Domain.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("IdMarca")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFinal.Domain.ProductoFranquicia", b =>
                {
                    b.HasOne("TFinal.Domain.Franquicia", "Franquicia")
                        .WithMany()
                        .HasForeignKey("IdFranquicia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TFinal.Domain.Producto", "Producto")
                        .WithMany("ProductoFranquicias")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TFinal.Domain.Sede", b =>
                {
                    b.HasOne("TFinal.Domain.Franquicia", "Franquicia")
                        .WithMany("Sedes")
                        .HasForeignKey("IdFranquicia")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
